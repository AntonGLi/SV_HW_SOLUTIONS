$date
	Mon Jun 30 00:52:51 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module add $end
$var wire 4 ! a [3:0] $end
$var wire 4 " b [3:0] $end
$var wire 4 # sum [3:0] $end
$upscope $end
$scope module testbench $end
$var wire 4 $ sum [3:0] $end
$var wire 1 % overflow $end
$var reg 4 & a [3:0] $end
$var reg 4 ' b [3:0] $end
$scope module inst $end
$var wire 4 ( a [3:0] $end
$var wire 4 ) b [3:0] $end
$var wire 1 % overflow $end
$var wire 4 * sum [3:0] $end
$upscope $end
$scope task test $end
$var reg 4 + t_a [3:0] $end
$var reg 4 , t_b [3:0] $end
$var reg 1 - t_overflow $end
$var reg 4 . t_sum [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 .
0-
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
0%
b0 $
bx #
bz "
bz !
$end
#1
b1 &
b1 (
b11 $
b11 *
b10 '
b10 )
b11 .
b10 ,
b1 +
#2
b1111 $
b1111 *
b1110 '
b1110 )
b1111 .
b1110 ,
#3
b1111 &
b1111 (
b1 $
b1 *
b10 '
b10 )
b1 .
b10 ,
b1111 +
#4
0%
b1101 $
b1101 *
b1110 '
b1110 )
b1101 .
b1110 ,
#5
1%
b100 &
b100 (
b1011 $
b1011 *
b111 '
b111 )
b1011 .
1-
b111 ,
b100 +
#6
0%
b1101 $
b1101 *
b1001 '
b1001 )
b1101 .
0-
b1001 ,
#7
b1100 &
b1100 (
b11 $
b11 *
b111 '
b111 )
b11 .
b111 ,
b1100 +
#8
1%
b101 $
b101 *
b1001 '
b1001 )
b101 .
1-
b1001 ,
#9
b11 &
b11 (
b1000 $
b1000 *
b101 '
b101 )
b1000 .
b101 ,
b11 +
#10
0%
b1110 $
b1110 *
b1011 '
b1011 )
b1110 .
0-
b1011 ,
#11
b1101 &
b1101 (
b10 $
b10 *
b101 '
b101 )
b10 .
b101 ,
b1101 +
#12
0%
b1000 $
b1000 *
b1011 '
b1011 )
b1000 .
b1011 ,
#13
1%
b11 &
b11 (
b1001 $
b1001 *
b110 '
b110 )
b1001 .
1-
b110 ,
b11 +
#14
0%
b1101 $
b1101 *
b1010 '
b1010 )
b1101 .
0-
b1010 ,
#15
b1101 &
b1101 (
b11 $
b11 *
b110 '
b110 )
b11 .
b110 ,
b1101 +
#16
1%
b111 $
b111 *
b1010 '
b1010 )
b111 .
1-
b1010 ,
#17
0%
b10 &
b10 (
b11 $
b11 *
b1 '
b1 )
b11 .
0-
b1 ,
b10 +
#18
b1111 $
b1111 *
b1110 &
b1110 (
b1111 .
b1110 +
#19
b10 &
b10 (
b1 $
b1 *
b1111 '
b1111 )
b1 .
b1111 ,
b10 +
#20
b1101 $
b1101 *
b1110 &
b1110 (
b1101 .
b1110 +
#21
1%
b111 &
b111 (
b1011 $
b1011 *
b100 '
b100 )
b1011 .
1-
b100 ,
b111 +
#22
0%
b1101 $
b1101 *
b1001 &
b1001 (
b1101 .
0-
b1001 +
#23
b111 &
b111 (
b11 $
b11 *
b1100 '
b1100 )
b11 .
b1100 ,
b111 +
#24
1%
b101 $
b101 *
b1001 &
b1001 (
b101 .
1-
b1001 +
#25
b101 &
b101 (
b1000 $
b1000 *
b11 '
b11 )
b1000 .
b11 ,
b101 +
#26
0%
b1110 $
b1110 *
b1011 &
b1011 (
b1110 .
0-
b1011 +
#27
b101 &
b101 (
b10 $
b10 *
b1101 '
b1101 )
b10 .
b1101 ,
b101 +
#28
b1000 $
b1000 *
b1011 &
b1011 (
b1000 .
b1011 +
#29
1%
b110 &
b110 (
b1001 $
b1001 *
b11 '
b11 )
b1001 .
1-
b11 ,
b110 +
#30
0%
b1101 $
b1101 *
b1010 &
b1010 (
b1101 .
0-
b1010 +
#31
b110 &
b110 (
b11 $
b11 *
b1101 '
b1101 )
b11 .
b1101 ,
b110 +
#32
1%
b111 $
b111 *
b1010 &
b1010 (
b111 .
1-
b1010 +
#33
0%
b1 &
b1 (
b10 $
b10 *
b1 '
b1 )
b10 .
0-
b1 ,
b1 +
#34
b0 $
b0 *
b1111 '
b1111 )
b0 .
b1111 ,
#35
b1111 &
b1111 (
b0 $
b0 *
b1 '
b1 )
b1 ,
b1111 +
#36
0%
b1110 $
b1110 *
b1111 '
b1111 )
b1110 .
b1111 ,
#37
1%
b100 &
b100 (
b1000 $
b1000 *
b100 '
b100 )
b1000 .
1-
b100 ,
b100 +
#38
0%
b0 $
b0 *
b1100 '
b1100 )
b0 .
0-
b1100 ,
#39
b1100 &
b1100 (
b0 $
b0 *
b100 '
b100 )
b100 ,
b1100 +
#40
0%
b1000 $
b1000 *
b1100 '
b1100 )
b1000 .
b1100 ,
#41
